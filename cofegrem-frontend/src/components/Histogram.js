import React from "react";
import { scaleLinear, max } from "d3";

// Render a histogram
//   bins is a data structure generated by d3 histogram()
//   spec is the specification for rendering: {margins: {left: 10, ...}, width: xxx, height: xxx}
//   xDomain (optional) is the domain of x axis.  If not specified, it will use first and last bin to compute the min and max value
export default function renderHistogram({ bins, spec, xDomain }) {
    // const yScaleMax = graph.edges.length;
    const { margins, width, height } = spec;
    const yScaleMax = max(bins.map((b) => b.length));
    const yScale = scaleLinear().domain([0, yScaleMax]).range([0, height]);
    const xScale = scaleLinear()
        .domain(xDomain ? xDomain : [bins[0].x0, bins[bins.length - 1].x1])
        .range([0, width]);
    const xTicks = xScale.ticks(3),
        xFormat = xScale.tickFormat(3, "s");
    const yTicks = yScale.ticks(4),
        yFormat = yScale.tickFormat(4, "s");

    const svgWidth = margins.left + margins.right + width;
    const svgHeight = margins.left + margins.right + height;

    return (
        <svg width={svgWidth} height={svgHeight}>
            <g transform={`translate(${margins.left},${margins.top})`} className="histogram">
                {bins.map((b, i) => (
                    <rect
                        className="bar"
                        key={i}
                        x={xScale(b.x0)}
                        y={height - yScale(b.length)}
                        width={xScale(b.x1) - xScale(b.x0) - 1}
                        height={yScale(b.length)}
                    >
                        <title>
                            [{b.x0}-{b.x1}] count: {b.length}
                        </title>
                    </rect>
                ))}

                <g className="axis" transform={`translate(0,${height})`}>
                    <line x1={0} y1={0} x2={width} y2={0} />
                    {xTicks.map((x, i) => (
                        <text key={i} x={xScale(x)} y={10} textAnchor="middle">
                            {xFormat(x)}
                        </text>
                    ))}
                </g>
                <g className="axis">
                    <line x1={-2} y1={height} x2={-2} y2={0} />
                    {yTicks.map((y, i) => (
                        <text key={i} x={-6} y={height - yScale(y)} textAnchor="end">
                            {yFormat(y)}
                        </text>
                    ))}
                </g>
            </g>
        </svg>
    );
}
